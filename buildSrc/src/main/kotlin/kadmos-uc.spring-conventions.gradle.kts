import org.springframework.boot.gradle.tasks.bundling.BootBuildImage
import org.springframework.boot.gradle.tasks.run.BootRun

plugins {
    id("kadmos-uc.java-conventions")
    id ("org.springframework.boot")
    id ("io.spring.dependency-management")
}

repositories {
    maven("https://repo.spring.io/milestone")
    maven("https://repo.spring.io/snapshot")
}

dependencies {
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    annotationProcessor("org.springframework:spring-context-indexer")
}

springBoot {
    buildInfo {
        properties {
            // from docs: "The default value for build.time is the instant at which the project is being built.
            // A side-effect of this is that the task will never be up-to-date. As a result, builds will take longer
            // as more tasks, including the project’s tests, will have to be executed. Another side-effect is that
            // the task’s output will always change and, therefore, the build will not be truly repeatable.
            // If you value build performance or repeatability more highly than the accuracy of the build.time property,
            // set time to null or a fixed value."
            time = null
        }
    }
}

// removes version from jar name to potentially simplify things with docker
tasks.getByName<org.springframework.boot.gradle.tasks.bundling.BootJar>("bootJar") {
    layered {
        isEnabled = false
    }
    archiveFileName.set("${archiveBaseName.get()}.${archiveExtension.get()}")
}

// the following is useful when you are using spring boot devtools and want it to monitor the files on your resources
// source set for changes instead of the build output.
tasks.getByName<BootRun>("bootRun") {
    sourceResources(sourceSets["main"])
    if (project.hasProperty("jvmArgs")) {
        val jvmElements = project.property("jvmArgs").toString().split("\\s+".toRegex())
        jvmArgs?.addAll(jvmElements)
        if (jvmArgs == null) jvmArgs = jvmElements
    }

}

// if needed to configure images generated by bootBuildImage
tasks.getByName<BootBuildImage>("bootBuildImage") {

    // quote from docs: "The CNB builder caches layers that are used when building and launching an image. By default,
    // these caches are stored as named volumes in the Docker daemon with names that are derived from the full name
    // of the target image. If the image name changes frequently, for example when the project version is used as a
    // tag in the image name, then the caches can be invalidated frequently."
    // source: https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#build-image.examples.caches
    buildCache {
        volume {
            name = "cache-${rootProject.name}.build"
        }
    }
    launchCache {
        volume {
            name = "cache-${rootProject.name}.launch"
        }
    }

//  // example of configuring the JVM version used by the Paketo Java buildpacks at build time
//  environment = mapOf("BP_JVM_VERSION" to "8.*")
//
//  // configuring the Runtime JVM
//	environment = mapOf(
//		"BPE_DELIM_JAVA_TOOL_OPTIONS" to " ",
//		"BPE_APPEND_JAVA_TOOL_OPTIONS" to "-XX:+HeapDumpOnOutOfMemoryError"
//	)
//
//  // giving a custom image name
//  imageName = "example.com/library/${project.name}"
//
//  // publishing an image example
//	isPublish = true
//	docker {
//		publishRegistry {
//			username = "user"
//			password = "secret"
//			url = "https://docker.example.com/v1/"
//			email = "user@example.com"
//		}
//	}
}
